<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Verify OTP | Image Upload System</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
  <style>
    .otp-input::-webkit-outer-spin-button,
    .otp-input::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }
    .otp-input {
      -moz-appearance: textfield;
    }
    
    /* Enhanced OTP input styling */
    .otp-container {
      display: flex;
      gap: 8px;
      justify-content: center;
      margin-top: 1rem;
    }
    
    .otp-digit {
      width: 40px;
      height: 50px;
      border: 1px solid #D1D5DB;
      border-radius: 0.375rem;
      text-align: center;
      font-size: 1.25rem;
      font-weight: 600;
      color: #1F2937;
      transition: all 0.2s;
    }
    
    .otp-digit:focus {
      border-color: #4F46E5;
      box-shadow: 0 0 0 3px rgba(79, 70, 229, 0.15);
      outline: none;
    }
    
    /* Timer styling */
    .countdown {
      font-size: 1rem;
      color: #4B5563;
      text-align: center;
      margin-top: 1rem;
    }
    
    .countdown.expiring {
      color: #DC2626;
    }
  </style>
</head>
<body class="bg-gray-50">
  <div class="min-h-screen flex flex-col justify-center py-12 sm:px-6 lg:px-8">
    <div class="sm:mx-auto sm:w-full sm:max-w-md">
      <div class="text-center">
        <a href="/" class="text-xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-indigo-600 to-purple-600 inline-flex items-center">
          <i class="fas fa-cloud-upload-alt mr-2"></i>Image Upload System
        </a>
      </div>
      <h2 class="mt-6 text-center text-3xl font-extrabold text-gray-900">Verify OTP</h2>
      <p class="mt-2 text-center text-sm text-gray-600">
        We've sent a one-time password to <span class="font-medium text-indigo-600"><%= email %></span>
      </p>
      <p class="text-center text-sm text-gray-500 mt-1">
        Check your inbox (and spam folder) for the verification code
      </p>
    </div>

    <div class="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
      <div class="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <!-- Development Mode OTP Display -->
        <% if (locals.devMode && locals.devOtp) { %>
          <div class="rounded-md bg-yellow-50 p-4 mb-4 border-l-4 border-yellow-400">
            <div class="flex">
              <div class="flex-shrink-0">
                <i class="fas fa-exclamation-triangle text-yellow-400"></i>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-yellow-800">Development Mode</h3>
                <div class="mt-2 text-sm text-yellow-700">
                  <p>Your OTP is: <strong class="text-lg font-mono"><%= devOtp %></strong></p>
                  <p class="mt-1 text-xs">This message is only displayed in development mode</p>
                </div>
              </div>
            </div>
          </div>
        <% } %>
        
        <!-- Error Display -->
        <% if (locals.error) { %>
          <div class="rounded-md bg-red-50 p-4 mb-4">
            <div class="flex">
              <div class="flex-shrink-0">
                <i class="fas fa-exclamation-circle text-red-400"></i>
              </div>
              <div class="ml-3">
                <h3 class="text-sm font-medium text-red-800"><%= error %></h3>
              </div>
            </div>
          </div>
        <% } %>

        <form class="space-y-6" action="/auth/verify-otp" method="POST" id="otpForm">
          <input type="hidden" name="email" value="<%= email %>">
          <input type="hidden" name="otp" id="hiddenOtpInput">
          
          <div>
            <label for="otp-digit-1" class="block text-sm font-medium text-center text-gray-700 mb-1">Enter 6-digit Verification Code</label>
            
            <!-- Segmented OTP input -->
            <div class="otp-container">
              <input type="text" class="otp-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" id="otp-digit-1" autofocus>
              <input type="text" class="otp-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" id="otp-digit-2">
              <input type="text" class="otp-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" id="otp-digit-3">
              <input type="text" class="otp-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" id="otp-digit-4">
              <input type="text" class="otp-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" id="otp-digit-5">
              <input type="text" class="otp-digit" maxlength="1" pattern="[0-9]" inputmode="numeric" id="otp-digit-6">
            </div>
            
            <!-- OTP expiry countdown -->
            <div class="countdown mt-3 text-center" id="countdown">
              OTP expires in <span id="timer">10:00</span>
            </div>
          </div>

          <div>
            <button type="submit" class="w-full flex justify-center py-3 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
              <i class="fas fa-check-circle mr-2"></i> Verify OTP
            </button>
          </div>
        </form>

        <div class="mt-4 text-center">
          <button id="resendOtp" class="text-indigo-600 hover:text-indigo-800 text-sm font-medium disabled:text-gray-400" disabled>
            <i class="fas fa-redo-alt mr-1"></i> Resend OTP <span id="resendTimer" class="text-xs">(60s)</span>
          </button>
        </div>

        <div class="mt-6">
          <div class="relative">
            <div class="absolute inset-0 flex items-center">
              <div class="w-full border-t border-gray-300"></div>
            </div>
            <div class="relative flex justify-center text-sm">
              <span class="px-2 bg-white text-gray-500">Or</span>
            </div>
          </div>

          <div class="mt-6 grid grid-cols-2 gap-3">
            <div>
              <a href="/auth/forgot-password" class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                Try Again
              </a>
            </div>
            <div>
              <a href="/" class="w-full inline-flex justify-center py-2 px-4 border border-gray-300 rounded-md shadow-sm bg-white text-sm font-medium text-gray-500 hover:bg-gray-50">
                Back to Home
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <script>
    // Handle segmented OTP input
    document.addEventListener('DOMContentLoaded', function() {
      const digitInputs = document.querySelectorAll('.otp-digit');
      const form = document.getElementById('otpForm');
      const hiddenInput = document.getElementById('hiddenOtpInput');
      
      // Auto-tab between digits
      digitInputs.forEach((input, index) => {
        input.addEventListener('input', (e) => {
          // Only allow numbers
          e.target.value = e.target.value.replace(/[^0-9]/g, '');
          
          // Move to next input if value is entered
          if (e.target.value && index < digitInputs.length - 1) {
            digitInputs[index + 1].focus();
          }
          
          // Update hidden input with full OTP value
          updateHiddenInput();
        });
        
        // Handle backspace
        input.addEventListener('keydown', (e) => {
          if (e.key === 'Backspace' && !e.target.value && index > 0) {
            digitInputs[index - 1].focus();
          }
        });
      });
      
      // Combine all digits into the hidden input before form submission
      function updateHiddenInput() {
        let otp = '';
        digitInputs.forEach(input => {
          otp += input.value;
        });
        hiddenInput.value = otp;
      }
      
      form.addEventListener('submit', () => {
        updateHiddenInput();
      });
      
      // Countdown timer for OTP expiration (10 minutes)
      let minutes = 9;
      let seconds = 59;
      const timerElement = document.getElementById('timer');
      const countdownElement = document.getElementById('countdown');
      
      const timer = setInterval(() => {
        if (seconds === 0) {
          if (minutes === 0) {
            clearInterval(timer);
            timerElement.textContent = "00:00";
            countdownElement.classList.add('expiring');
            countdownElement.innerHTML = '<i class="fas fa-exclamation-circle mr-1"></i> OTP has expired. Please request a new one.';
            return;
          }
          minutes--;
          seconds = 59;
        } else {
          seconds--;
        }
        
        // If less than 1 minute remaining, add expiring class
        if (minutes === 0 && seconds <= 59) {
          countdownElement.classList.add('expiring');
        }
        
        timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
      }, 1000);
      
      // Resend OTP functionality
      const resendButton = document.getElementById('resendOtp');
      const resendTimerElement = document.getElementById('resendTimer');
      let resendSeconds = 60;
      
      const resendTimer = setInterval(() => {
        resendSeconds--;
        resendTimerElement.textContent = `(${resendSeconds}s)`;
        
        if (resendSeconds <= 0) {
          clearInterval(resendTimer);
          resendButton.removeAttribute('disabled');
          resendTimerElement.textContent = '';
        }
      }, 1000);
      
      resendButton.addEventListener('click', async () => {
        if (resendButton.hasAttribute('disabled')) return;
        
        try {
          resendButton.setAttribute('disabled', true);
          const email = document.querySelector('input[name="email"]').value;
          
          // Send request to resend OTP
          const response = await fetch('/auth/resend-otp', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({ email })
          });
          
          const data = await response.json();
          
          // Reset the countdown
          minutes = 9;
          seconds = 59;
          countdownElement.classList.remove('expiring');
          
          // Reset resend timer
          resendSeconds = 60;
          resendTimerElement.textContent = `(${resendSeconds}s)`;
          
          const resendTimerInterval = setInterval(() => {
            resendSeconds--;
            resendTimerElement.textContent = `(${resendSeconds}s)`;
            
            if (resendSeconds <= 0) {
              clearInterval(resendTimerInterval);
              resendButton.removeAttribute('disabled');
              resendTimerElement.textContent = '';
            }
          }, 1000);
          
          // Show success message
          if (data.devMode && data.devOtp) {
            // If in dev mode and OTP is provided in the response, show it
            alert(`Development Mode: Your OTP is ${data.devOtp}`);
            
            // Auto-fill the OTP fields
            const digits = data.devOtp.toString().split('');
            digitInputs.forEach((input, index) => {
              if (index < digits.length) {
                input.value = digits[index];
                updateHiddenInput();
              }
            });
          } else {
            alert('A new OTP has been sent to your email.');
          }
        } catch (error) {
          console.error('Error resending OTP:', error);
          alert('Failed to resend OTP. Please try again later.');
          resendButton.removeAttribute('disabled');
        }
      });
    });
  </script>
</body>
</html>
